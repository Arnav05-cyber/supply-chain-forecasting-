# Kubernetes Deployment for Scalable Forecasting System
apiVersion: v1
kind: Namespace
metadata:
  name: forecasting-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: forecasting-config
  namespace: forecasting-system
data:
  BATCH_SIZE: "10000"
  WORKERS: "16"
  MEMORY_LIMIT: "8Gi"
  MODEL_TYPE: "ensemble"
  CACHE_TTL: "3600"
  LOG_LEVEL: "INFO"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: forecasting-api
  namespace: forecasting-system
  labels:
    app: forecasting-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: forecasting-api
  template:
    metadata:
      labels:
        app: forecasting-api
    spec:
      containers:
      - name: forecasting-api
        image: forecasting-system:latest
        ports:
        - containerPort: 8000
        env:
        - name: BATCH_SIZE
          valueFrom:
            configMapKeyRef:
              name: forecasting-config
              key: BATCH_SIZE
        - name: WORKERS
          valueFrom:
            configMapKeyRef:
              name: forecasting-config
              key: WORKERS
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: forecasting-service
  namespace: forecasting-system
spec:
  selector:
    app: forecasting-api
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8000
  type: LoadBalancer
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: forecasting-hpa
  namespace: forecasting-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: forecasting-api
  minReplicas: 3
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: forecasting-ingress
  namespace: forecasting-system
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  rules:
  - host: forecasting-api.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: forecasting-service
            port:
              number: 80